pf <- read.delim('/datasets/ud651/pseudo_facebook.tsv')
getwd()
pf <- read.delim('/pseudo_facebook.tsv')
pf <- read.delim('pseudo_facebook.tsv')
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green')+
ylab('xMale Friends')+
geom_line(y=1)
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green')+
ylab('xMale Friends')+
geom_line(y=1)
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
#Grouping by age and gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
#putting color in an aesthetic wrapper in the line
ggplot(pf.fc_by_age_gender, aes(x=age, y=median_friend_count)) +geom_line(aes(color=gender))
#Creating a wide dataframe
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green')+
ylab('xMale Friends')+
geom_line(y=1)
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green')+
ylab('xMale Friends')+
geom_line(y=1, linetype=2)
View(pf)
pf <- transform(pf, prop_initiated = friend_count/friendships_initiated)
pf <- transform(pf, prop_initiated = friendships_initiated/friend_count)
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
pf <- transform(pf, prop_initiated = friendships_initiated/friend_count)
ggplot(pf, aes(x=tenure, y=year_joined)) +geom_line()
View(pf)
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
#Grouping by age and gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
#putting color in an aesthetic wrapper in the line
ggplot(pf.fc_by_age_gender, aes(x=age, y=median_friend_count)) +geom_line(aes(color=gender))
#Creating a wide dataframe
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green')+
ylab('xMale Friends')
#Creating a variable year joined by subtracting tenure(days) from date of sample (2014)
pf$year_joined <- floor(2014 - (pf$tenure/365))
summary(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012, 2014))
table(pf$year_joined.bucket)
#Plotting the different lines for each year joined bucket
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
#Plotting the mean but also adding the grandmean
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=mean)+
geom_line(stat='summary', fun.y=mean, linetype=2)
#If we were to look at the fc by day as a rate: (fc/tenure)
with(subset(pf, tenure>0), summary(friend_count/tenure))
#looking at how many friendships someone initiates based on tenure, colored by year joined
ggplot(subset(pf, tenure>0), aes(x=tenure, y=friendships_initiated/tenure)) +
geom_line(aes(color=year_joined.bucket), stat='summary')
#With smooth line (using loess)
ggplot(subset(pf, tenure>0), aes(x=tenure, y=friendships_initiated/tenure)) +
geom_smooth(aes(color=year_joined.bucket))
pf <- transform(pf, prop_initiated = friendships_initiated/friend_count)
ggplot(pf, aes(x=tenure, y=year_joined)) +geom_line()
library(GGally)
theme_set(theme_minimal(20))
#Using a random seed and generating a scatterplot matrix
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +
geom_line(color='lime green')+
geom_line(y=1, linetype=2)
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_line()
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_line(color=year_joined.bucket)
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_line(color=year_joined.bucket)
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_line(aes(color=year_joined.bucket))
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_smooth(aes(color=year_joined.bucket))
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_smooth(aes(color=year_joined.bucket))
ggplot(pf, aes(x=year_joined, y=friendships_initiated)) +geom_line(aes(color=year_joined.bucket))
ggplot(pf, aes(x=tenure, y=friendships_initiated)) +geom_line(aes(color=year_joined.bucket))
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf <- transform(pf, prop_initiated = friend_count/friendships_initiated)
pf <- transform(pf, prop_initiated = friend_count/friendships_initiated)
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf <- transform(pf, prop_initiated = friendships_initiated/friend_count)
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
mutate(prop_initiated = ifelse(friend_count > 0, friendships_initiated/friend_count, 0))
pf <- pf %>%
mutate(prop_initiated = ifelse(friend_count > 0, friendships_initiated/friend_count, 0))
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf <- pf %>%
mutate(prop_initiated = ifelse(friend_count > 0, friendships_initiated/friend_count, 0))
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
ggplot(subset(pf, tenure>0), aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf$prop_initiated <- ifelse(is.nan(pf$friendships_initiated / pf$friend_count), 0, pf$friendships_initiated / pf$friend_count)
ggplot(subset(pf, tenure>0), aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf$prop_initiated <- ifelse(is.nan(pf$friendships_initiated / pf$friend_count), 0, pf$friendships_initiated / pf$friend_count)
ggplot(subset(pf, tenure>0), aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
pf <- transform(pf, prop_initiated = ifelse(friend_count>0, friendships_initiated/friend_count, 0)
pf <- transform(pf, prop_initiated = ifelse(friend_count>0, friendships_initiated/friend_count, 0))
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket))
summary(pf$prop_initiated)
library(GGally)
theme_set(theme_minimal(20))
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_point())
str(pf$prop_initiated)
pf$prop_initiated <- factor(pf$prop_initiated)
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_point())
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line())
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line())
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line(aes(color=year_joined.bucket), stat='summary')
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line(aes(color=year_joined.bucket), stat='summary')
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line(aes(color=year_joined.bucket), stat='summary')
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line(aes(color=year_joined.bucket), stat='summary'))
ggplot(pf, aes(x=tenure, y=prop_initiated) +geom_line(aes(color=year_joined.bucket), stat='summary'))
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket), stat='summary')
ggplot(pf, aes(x=tenure, y=prop_initiated)) +geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
summary(pf$prop_initiated)
pf <- transform(pf, prop_initiated = ifelse(friend_count>0, friendships_initiated/friend_count, 0))
pf <- transform(pf, prop_initiated = ifelse(friend_count>0, friendships_initiated/friend_count, 0))
summary(pf$prop_initiated)
ggplot(pf, aes(x=tenure, y=prop_initiated)) +
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
ggplot(pf, aes(x=tenure, y=prop_initiated)) +
geom_smooth(aes(color=year_joined.bucket))
subset(pf, year_joined.bucket == (2012, 2014]))
subset(pf, year_joined.bucket = (2012, 2014]))
mean(subset(pf, year_joined > 2012)$prop_initiated)
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
suppressMessages(library(dplyr))
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep= '\t')
#Grouping by age and gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
#putting color in an aesthetic wrapper in the line
ggplot(pf.fc_by_age_gender, aes(x=age, y=median_friend_count)) +geom_line(aes(color=gender))
#Grouping by age and gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
#putting color in an aesthetic wrapper in the line
ggplot(pf.fc_by_age_gender, aes(x=age, y=median_friend_count)) +geom_line(aes(color=gender))
#Creating a wide dataframe
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +geom_line(color='lime green') +
geom_hline(yintercept = 1, alpha =0.3, linetype=2)+
ylab('xMale Friends')
#Creating a variable year joined by subtracting tenure(days) from date of sample (2014)
pf$year_joined <- floor(2014 - (pf$tenure/365))
summary(pf$year_joined)
table(pf$year_joined)
#Dividing up the years joined with cut function
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012, 2014))
table(pf$year_joined.bucket)
#Plotting the different lines for each year joined bucket
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
#Plotting the mean but also adding the grandmean
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=mean)+
geom_line(stat='summary', fun.y=mean)
#Grouping by age and gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
#putting color in an aesthetic wrapper in the line
ggplot(pf.fc_by_age_gender, aes(x=age, y=median_friend_count)) +geom_line(aes(color=gender))
#Creating a wide dataframe
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
#Plotting the multiple of friends that females have compared to men
ggplot(pf.fc_by_age_gender.wide, aes(x=age, y=female/male)) +
geom_line(color='lime green')+
geom_line(y=1, linetype=2)
ylab('xMale Friends')
#Creating a variable year joined by subtracting tenure(days) from date of sample (2014)
pf$year_joined <- floor(2014 - (pf$tenure/365))
summary(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012, 2014))
table(pf$year_joined.bucket)
#Plotting the different lines for each year joined bucket
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
#Plotting the mean but also adding the grandmean
ggplot(subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count))+
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=mean)+
geom_line(stat='summary', fun.y=mean, linetype=2)
#If we were to look at the fc by day as a rate: (fc/tenure)
with(subset(pf, tenure>0), summary(friend_count/tenure))
#looking at how many friendships someone initiates based on tenure, colored by year joined
ggplot(subset(pf, tenure>0), aes(x=tenure, y=friendships_initiated/tenure)) +
geom_line(aes(color=year_joined.bucket), stat='summary')
#With smooth line (using loess)
ggplot(subset(pf, tenure>0), aes(x=tenure, y=friendships_initiated/tenure)) +
geom_smooth(aes(color=year_joined.bucket))
pf <- transform(pf, prop_initiated = ifelse(friend_count>0, friendships_initiated/friend_count, 0))
summary(pf$prop_initiated)
#plotting the proportion of friendships initiated over tenure
ggplot(pf, aes(x=tenure, y=prop_initiated)) +
geom_line(aes(color=year_joined.bucket), stat='summary', fun.y=median)
#Looking at it wiht a smooth line
ggplot(pf, aes(x=tenure, y=prop_initiated)) +
geom_smooth(aes(color=year_joined.bucket))
#calculating the average proportion of friends inidiated for 2012> group
mean(subset(pf, year_joined > 2012)$prop_initiated)
library(GGally)
theme_set(theme_minimal(20))
#Using a random seed and generating a scatterplot matrix
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000),])
ggplot(diamonds, aes(x=cut, y=price)) +geom_point()+
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(color=color)+
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(color=color)+
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(aes(color=color)+
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(aes(color=color))+
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(aes(color=color))+
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(aes(color=color))+
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x=cut, y=price)) +geom_point(aes(color=color))+
scale_color_brewer(type = 'div')+
facet_wrap(~ clarity)
ggplot(diamonds, aes(x=cut, y=price)) +geom_jitter(aes(color=color))+
scale_color_brewer(type = 'div')+
facet_wrap(~ clarity)
#Plotting the histograms in each color with a facet wrap showing the different cuts
ggplot(diamonds, aes(x=price, fill=cut))+ geom_histogram()+ facet_wrap(~color)+
scale_fill_brewer(type = 'qual')+
scale_x_log10()
#Creating a scatter plot of the table value vs price
#Table reflects the width of hte top diamond
ggplot(diamonds, aes(x=table, y=price)) +
geom_point(aes(color=cut), alpha=1/2)+
scale_color_brewer(type='qual')+
coord_cartesian(xlim=c(50,80))
#Adding a volume variable with transform
diamonds <- transform(diamonds, volume = x*y*z)
#Plotting price (in a log10 scale) in terms of volume colored by clarity
ggplot(subset(diamonds, volume < quantile(volume, 0.99)), aes(x=volume, y=price))+
geom_point(aes(color = clarity))+
scale_color_brewer(type = 'div')+
scale_y_log10()
ggplot(diamonds, aes(x=cut, y=price)) +geom_jitter(aes(color=color))+
scale_color_brewer(type = 'div')+
facet_wrap(~ clarity)
#Investigating carats using a frequency polygon
#Fyi using these limits on purpose
ggplot(diamonds, aes(x=carat))+
geom_freqpoly(binwidth=0.1)+
scale_x_continuous(limits=c(0,6), breaks=seq(0,6,0.25))+
scale_y_continuous(limits=c(0,11000), breaks=seq(0,11000,1000))
ggplot(diamonds, aes(x=x, y=price))+geom_point(color="blue", alpha=1/20)
#Calculating correlations
with(diamonds, cor.test(x, price))
with(diamonds, cor.test(y, price))
with(diamonds, cor.test(z, price))
ggplot(diamonds, aes(x=depth, y=price)) +geom_point(color='blue', alpha=1/100)+
scale_x_continuous(breaks = seq(0,80,2))
with(diamonds, cor.test(x=depth, y=price))
ggplot(diamonds, aes(x=carat, y=price))+geom_point(color='blue', alpha=1/20)+
scale_x_continuous(limits = c(0, quantile(diamonds$carat, 0.99)))+
scale_y_continuous(limits = c(0, quantile(diamonds$price, 0.99)))
ggplot(diamonds, aes(x= x*y*z, y=price)) +geom_point(alpha = 1/20, color='blue')
#Calculating volume with variables x, y,z
#Getting correlation but not including volume of 0 or 800+
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
with(subset(diamonds,diamonds$volume>0 & diamonds$volume<800), cor.test(volume, price))
ggplot(subset(diamonds,diamonds$volume>0 & diamonds$volume<800), aes(x= x*y*z, y=price)) +
geom_point(alpha = 1/50, color='blue')+
geom_smooth(method = 'lm', color='red')
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
library(gridExtra)
b1 <- ggplot(diamondsByClarity, aes(x=clarity, y=mean_price))+ geom_bar(stat='identity', color='blue')
b2 <- ggplot(diamondsByClarity, aes(x=clarity, y=median_price))+ geom_bar(stat='identity', color='blue')
grid.arrange(b1,b2)
#Plotting the histograms in each color with a facet wrap showing the different cuts
ggplot(diamonds, aes(x=price, fill=cut))+ geom_histogram()+ facet_wrap(~color)+
scale_fill_brewer(type = 'qual')+
scale_x_log10()
#Creating a scatter plot of the table value vs price
#Table reflects the width of hte top diamond
ggplot(diamonds, aes(x=table, y=price)) +
geom_point(aes(color=cut), alpha=1/2)+
scale_color_brewer(type='qual')+
coord_cartesian(xlim=c(50,80))
#Adding a volume variable with transform
diamonds <- transform(diamonds, volume = x*y*z)
#Plotting price (in a log10 scale) in terms of volume colored by clarity
ggplot(subset(diamonds, volume < quantile(volume, 0.99)), aes(x=volume, y=price))+
geom_point(aes(color = clarity))+
scale_color_brewer(type = 'div')+
scale_y_log10()
ggplot(diamonds, aes(x=cut, y=price)) +geom_jitter(aes(color=color))+
scale_color_brewer(type = 'div')+
facet_wrap(~ clarity)
library(ggplot2)
data(diamonds)
summary(diamonds)
str(diamonds)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
library(gridExtra)
b1 <- ggplot(diamondsByClarity, aes(x=clarity, y=mean_price))+ geom_bar(stat='identity', color='blue')
b2 <- ggplot(diamondsByClarity, aes(x=clarity, y=median_price))+ geom_bar(stat='identity', color='blue')
grid.arrange(b1,b2)
#Adding a volume variable with transform
diamonds <- transform(diamonds, volume = x*y*z)
ggplot(diamonds, aes(x=cut, y=price)) +geom_jitter(aes(color=color))+
scale_color_brewer(type = 'div')+
facet_wrap(~ clarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
knit_with_parameters('~/Git/RDiamonds/Diamonds.Rmd')
library(ggplot2)
library(dplyr)
data(diamonds)
summary(diamonds)
str(diamonds)
